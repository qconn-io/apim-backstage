app:
  # Should be the same as backend.baseUrl when using the `app-backend` plugin.
  baseUrl: http://localhost:3001

backend:
  # Note that the baseUrl should be the URL that the browser and other clients
  # should use when communicating with the backend, i.e. it needs to be
  # reachable not just from within the backend host, but from all of your
  # callers. When its value is "http://localhost:3001", it's accessible from the host.
  baseUrl: http://localhost:3001
  # The listener can also be expressed as a single <host>:<port> string. In this case we bind to
  # all interfaces, the most permissive setting. The right value depends on your specific deployment.
  listen: ':7007'
  # CORS configuration for authentication
  cors:
    origin: http://localhost:3001
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true

  # config options: https://node-postgres.com/apis/client
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      database: ${POSTGRES_DB}
      # https://node-postgres.com/features/ssl
      # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
      # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
      # ssl:
      #   ca: # if you have a CA file and want to verify it you can uncomment this section
      #     $file: <file-path>/ca/server.crt

  # Backend authentication keys for service-to-service communication
  auth:
    externalAccess:
      - type: static
        options:
          token: ${BACKEND_SECRET}
          subject: backstage-server

# Disable GitHub integration in production
integrations:
  github: []

auth:
  # Environment for authentication
  environment: production
  # Session configuration required for OIDC
  session:
    secret: ${SESSION_SECRET}
  providers:
    # Guest provider for development and testing
    guest: {}
    oidc:
      production:
        metadataUrl: ${KEYCLOAK_BASE_URL}/realms/internal/.well-known/openid-configuration
        clientId: ${KEYCLOAK_CLIENT_ID}
        clientSecret: ${KEYCLOAK_CLIENT_SECRET}
        callbackUrl: http://localhost:3001/api/auth/oidc/handler/frame
        additionalScopes:
          - openid
          - profile
          - email
        prompt: auto
        signIn:
          resolvers:
            - resolver: emailMatchingUserEntityProfileEmail
            - resolver: emailLocalPartMatchingUserEntityName

catalog:
  # Overrides the default list locations from app-config.yaml as these contain example data.
  # See https://backstage.io/docs/features/software-catalog/#adding-components-to-the-catalog for more details
  # on how to get entities into the catalog.
  locations:
    # Local example data, replace this with your production config, these are intended for demo use only.
    # File locations are relative to the backend process, typically in a deployed context, such as in a Docker container, this will be the root
    - type: file
      target: ./examples/entities.yaml

    # Software Templates
    - type: file
      target: ./templates/rest-api-openapi/template.yaml
      rules:
        - allow: [Template]

    - type: file
      target: ./templates/event-asyncapi/template.yaml
      rules:
        - allow: [Template]

    - type: file
      target: ./templates/nodejs-service/template.yaml
      rules:
        - allow: [Template]

    - type: file
      target: ./templates/spring-boot-service/template.yaml
      rules:
        - allow: [Template]

    # Local example template
    - type: file
      target: ./examples/template/template.yaml
      rules:
        - allow: [Template]

    # Local example organizational data
    - type: file
      target: ./examples/org.yaml
      rules:
        - allow: [User, Group]
